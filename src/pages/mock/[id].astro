---
import Layout from "../Layout.astro";
import prisma from "../../lib/prisma";
import type { Mock, Question, Option } from "../../generated/prisma";
import { marked } from "marked";

const { id } = Astro.params;

type MockWithRelations = Mock & {
    questions: (Question & { options: Option[] })[];
};

const mock = (await prisma.mock.findUnique({
    where: { id },
    include: {
        questions: { include: { options: true } },
    },
})) as MockWithRelations | null;

if (!mock) {
    return Astro.redirect("/not-found", 404);
}

const questionCount = mock.questions.length;
const instructionsHtml = marked.parse(mock.instructions);
const totalMarks = mock.questions.reduce((sum, q) => sum + q.marks, 0);
---

<Layout title={`${mock.subject} Mock Test`}>
    <div class="max-w-3xl mx-auto px-6 py-12 space-y-10">
        <div class="text-center space-y-2">
            <h1 class="text-4xl font-bold text-gray-800">
                {mock.subject} Mock Test
            </h1>
            <hr />
            <p class="text-gray-600">
                🕒 Duration: {mock.totalTimeMins} minutes &nbsp;•&nbsp; ❓ Questions:
                {questionCount}
                &nbsp;•&nbsp; 🧮 Total Marks: {totalMarks}
            </p>
        </div>

        <section>
            <h2 class="text-2xl font-semibold text-gray-700 mb-4">
                Instructions
            </h2>
            <div
                class="prose max-w-none min-h-80 max-h-80 border-1 border-black prose-sm sm:prose lg:prose-lg p-2"
                set:html={instructionsHtml}
            />
        </section>

        <div class="text-center">
            <a
                href={`/mock/test/${mock.id}`}
                class="inline-block bg-gray-600 text-white text-lg font-medium px-6 py-3 rounded-md shadow hover:bg-gray-700 transition"
            >
                Start Test
            </a>
        </div>
    </div>
</Layout>
