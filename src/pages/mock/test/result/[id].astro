---
import Layout from "../../../Layout.astro";
import { marked } from "marked";

const { id } = Astro.params;

let quizResults = null;
let error = null;

try {
  const response = await fetch(`${Astro.url.origin}/api/v1/result?id=${id}`, {
    headers: {
      'Cookie': Astro.request.headers.get('Cookie') || ''
    }
  });
  
  const data = await response.json();
  
  if (data.ok) {
    quizResults = data.d;
  } else {
    error = data.error?.cause || 'Failed to load results';
  }
} catch (e) {
  error = 'Failed to fetch quiz results';
  console.error('Fetch error:', e);
}

let questions = [];
if (quizResults?.resultsJson) {
  questions = quizResults.resultsJson;
}

let totalQuestions = questions.length;
let correctAnswers = questions.filter((q: any) => q.isCorrect).length;
let incorrectAnswers = questions.filter((q: any) => !q.isCorrect && q.userOptionID !== null && q.userOptionID !== undefined).length;
let unanswered = questions.filter((q: any) => q.userOptionID === null || q.userOptionID === undefined).length;
let totalScore = quizResults?.totalMarks ?? 0;
let percentage = totalQuestions > 0 ? Math.round((correctAnswers / totalQuestions) * 100) : 0;

// Calculate time taken
let timeTaken = "N/A";
if (quizResults?.createdAt && quizResults?.mock?.totalTimeMins) {
  const totalMinutes = quizResults.mock.totalTimeMins;
  timeTaken = `${totalMinutes} mins`;
}
---

<Layout>
  <style>
    @keyframes slideUp {
      from {
        opacity: 0;
        transform: translateY(30px);
      }
      to {
        opacity: 1;
        transform: translateY(0);
      }
    }

    @keyframes fadeIn {
      from {
        opacity: 0;
        transform: scale(0.95);
      }
      to {
        opacity: 1;
        transform: scale(1);
      }
    }

    .animate-slide-up {
      animation: slideUp 0.6s ease-out;
    }

    .animate-fade-in {
      animation: fadeIn 0.6s ease-out backwards;
    }

    .delay-100 { animation-delay: 0.1s; }
    .delay-200 { animation-delay: 0.2s; }
    .delay-300 { animation-delay: 0.3s; }
    .delay-400 { animation-delay: 0.4s; }
    .delay-500 { animation-delay: 0.5s; }
    .delay-600 { animation-delay: 0.6s; }
    .delay-700 { animation-delay: 0.7s; }
    .delay-800 { animation-delay: 0.8s; }
    .delay-900 { animation-delay: 0.9s; }
    .delay-1000 { animation-delay: 1s; }

    .prose-styles {
      color: #334155;
      line-height: 1.6;
    }
    .prose-styles h1, .prose-styles h2, .prose-styles h3 {
      color: #1e293b;
      font-weight: 700;
      margin-top: 1rem;
      margin-bottom: 0.5rem;
    }
    .prose-styles p {
      margin-bottom: 0.75rem;
    }
    .prose-styles ul, .prose-styles ol {
      margin-left: 1.5rem;
      margin-bottom: 0.75rem;
    }
    .prose-styles code {
      background: #f1f5f9;
      padding: 0.125rem 0.25rem;
      border-radius: 0.25rem;
      font-size: 0.875rem;
    }

    .answer-prose {
      color: #475569;
      font-size: 0.875rem;
      line-height: 1.5;
    }
    .answer-prose p {
      margin: 0;
    }
  </style>

  <div class="min-h-screen bg-slate-100 p-4 md:p-8">
    
    {error ? (
      <div class="max-w-2xl mx-auto">
        <div class="bg-white rounded-2xl shadow-xl p-8 animate-slide-up border border-slate-200">
          <div class="text-center">
            <div class="w-20 h-20 bg-slate-200 rounded-full flex items-center justify-center mx-auto mb-4">
              <svg class="w-10 h-10 text-slate-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z" />
              </svg>
            </div>
            <h1 class="text-3xl font-bold text-slate-900 mb-2">Unable to Load Results</h1>
            <p class="text-slate-600 mb-6">{error}</p>
            <button 
              onclick="window.history.back()" 
              class="px-6 py-3 bg-slate-800 text-white rounded-xl font-semibold hover:bg-slate-900 transition-all transform hover:scale-105"
            >
              Go Back
            </button>
          </div>
        </div>
      </div>
    ) : !quizResults ? (
      <div class="max-w-2xl mx-auto">
        <div class="bg-white rounded-2xl shadow-xl p-8 animate-slide-up border border-slate-200">
          <div class="text-center">
            <div class="w-20 h-20 bg-slate-100 rounded-full flex items-center justify-center mx-auto mb-4">
              <div class="w-12 h-12 border-4 border-slate-700 border-t-transparent rounded-full animate-spin"></div>
            </div>
            <h1 class="text-2xl font-bold text-slate-900">Loading Results...</h1>
          </div>
        </div>
      </div>
    ) : (
      <div class="max-w-6xl mx-auto">
        <div class="bg-white rounded-2xl shadow-xl p-6 md:p-12 animate-slide-up border border-slate-200">
          
          <!-- Header -->
          <div class="text-center mb-8 md:mb-12">
            <div class="inline-flex items-center justify-center w-16 h-16 bg-slate-800 rounded-full mb-4">
              <svg class="w-8 h-8 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
              </svg>
            </div>
            <h1 class="text-4xl md:text-5xl font-extrabold text-slate-900 mb-2">
              Test Results
            </h1>
            <p class="text-slate-600 text-lg">Here's how you performed on this test</p>
            {quizResults.mock?.title && (
              <div class="mt-4 inline-block bg-slate-100 px-6 py-2 rounded-lg border border-slate-200">
                <p class="text-slate-800 font-semibold text-lg">{quizResults.mock.title}</p>
              </div>
            )}
          </div>

          <!-- Score Summary Cards -->
          <div class="grid grid-cols-2 md:grid-cols-4 gap-4 md:gap-6 mb-8 md:mb-12">
            <div class="bg-slate-800 rounded-xl p-6 text-white text-center shadow-lg animate-fade-in delay-100">
              <div class="text-4xl md:text-5xl font-extrabold mb-2">{percentage}%</div>
              <div class="text-xs uppercase tracking-wider opacity-90">Score</div>
            </div>
            <div class="bg-slate-700 rounded-xl p-6 text-white text-center shadow-lg animate-fade-in delay-200">
              <div class="text-4xl md:text-5xl font-extrabold mb-2">{correctAnswers}</div>
              <div class="text-xs uppercase tracking-wider opacity-90">Correct</div>
            </div>
            <div class="bg-slate-600 rounded-xl p-6 text-white text-center shadow-lg animate-fade-in delay-300">
              <div class="text-4xl md:text-5xl font-extrabold mb-2">{incorrectAnswers}</div>
              <div class="text-xs uppercase tracking-wider opacity-90">Incorrect</div>
            </div>
            <div class="bg-slate-500 rounded-xl p-6 text-white text-center shadow-lg animate-fade-in delay-400">
              <div class="text-4xl md:text-5xl font-extrabold mb-2">{unanswered}</div>
              <div class="text-xs uppercase tracking-wider opacity-90">Unanswered</div>
            </div>
          </div>

          <!-- Additional Stats -->
          <div class="grid grid-cols-1 md:grid-cols-3 gap-4 mb-8 bg-slate-50 rounded-xl p-6 border border-slate-200">
            <div class="text-center">
              <div class="text-slate-600 text-sm font-semibold mb-1">Total Questions</div>
              <div class="text-2xl font-bold text-slate-800">{totalQuestions}</div>
            </div>
            <div class="text-center border-l border-r border-slate-200">
              <div class="text-slate-600 text-sm font-semibold mb-1">Total Score</div>
              <div class="text-2xl font-bold text-slate-800">{totalScore} marks</div>
            </div>
            <div class="text-center">
              <div class="text-slate-600 text-sm font-semibold mb-1">Time Taken</div>
              <div class="text-2xl font-bold text-slate-800">{timeTaken}</div>
            </div>
          </div>

        
          <!-- Questions List -->
          {questions.length > 0 ? (
            <div class="space-y-4 md:space-y-6" id="questions-container">
              {questions.map((question: any, index: number) => {
                const isCorrect = question.isCorrect;
                const isUnanswered = question.userOptionID === null || question.userOptionID === undefined;
                
                const statusClass = isUnanswered ? 'border-slate-300 bg-slate-50' : 
                                  isCorrect ? 'border-slate-700 bg-white' : 
                                  'border-slate-400 bg-slate-50';
                const badgeClass = isUnanswered ? 'bg-slate-300 text-slate-700' :
                                  isCorrect ? 'bg-slate-800 text-white' :
                                  'bg-slate-500 text-white';
                const numberClass = isUnanswered ? 'bg-slate-400 text-white' :
                                  isCorrect ? 'bg-slate-700 text-white' :
                                  'bg-slate-500 text-white';
                
                const delayClass = `delay-${Math.min(400 + index * 100, 1000)}`;
                const filterClass = isUnanswered ? 'unanswered' : isCorrect ? 'correct' : 'incorrect';
                
                return (
                  <div class={`question-item ${filterClass} border-2 rounded-xl p-4 md:p-6 transition-all hover:shadow-lg animate-fade-in ${delayClass} ${statusClass}`}>
                    <div class="flex items-center gap-3 md:gap-4 mb-4">
                      <div class={`w-10 h-10 md:w-12 md:h-12 rounded-full flex items-center justify-center font-bold text-lg md:text-xl flex-shrink-0 ${numberClass}`}>
                        {question.number || index + 1}
                      </div>
                      <span class={`ml-auto px-3 py-1 rounded-lg text-xs font-bold uppercase tracking-wide ${badgeClass}`}>
                        {isUnanswered ? 'Unanswered' : isCorrect ? 'Correct ✓' : 'Incorrect ✗'}
                      </span>
                    </div>
                    
                    <div class="prose-styles mb-4 p-4 bg-white rounded-lg border border-slate-200" set:html={marked.parse(question.content || '')}></div>

                    <div class="space-y-3 mt-4">
                      <div class={`p-4 rounded-lg border-2 ${isUnanswered ? 'border-slate-300 bg-slate-100' : isCorrect ? 'border-slate-700 bg-slate-50' : 'border-slate-400 bg-slate-100'}`}>
                        <div class="flex items-start gap-2 mb-2">
                          <svg class="w-5 h-5 flex-shrink-0 mt-0.5" fill="currentColor" viewBox="0 0 20 20">
                            <path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z" clip-rule="evenodd" />
                          </svg>
                          <span class={`text-sm font-bold flex-shrink-0 ${isUnanswered ? 'text-slate-700' : isCorrect ? 'text-slate-800' : 'text-slate-700'}`}>
                            Your Answer:
                          </span>
                        </div>
                        {isUnanswered ? (
                          <span class="text-slate-600 italic text-sm ml-7">Not Answered</span>
                        ) : (
                          <div class="answer-prose ml-7 text-slate-700" set:html={marked.parse(question.userOption || '')}></div>
                        )}
                      </div>
                      
                      {!isCorrect && (
                        <div class="p-4 rounded-lg border-2 border-slate-700 bg-slate-50">
                          <div class="flex items-start gap-2 mb-2">
                            <svg class="w-5 h-5 flex-shrink-0 mt-0.5 text-slate-700" fill="currentColor" viewBox="0 0 20 20">
                              <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd" />
                            </svg>
                            <span class="text-sm font-bold text-slate-800 flex-shrink-0">Correct Answer:</span>
                          </div>
                          <div class="answer-prose ml-7 text-slate-700" set:html={marked.parse(question.correctOption || '')}></div>
                        </div>
                      )}
                    </div>
                    
                    <div class="pt-4 mt-4 border-t border-slate-200 flex items-center justify-between">
                      <span class="text-slate-600 font-semibold text-sm">
                        Score: <span class={`${question.score > 0 ? 'text-slate-800' : 'text-slate-500'}`}>{question.score || 0}</span> points
                      </span>
                      {question.marks && (
                        <span class="text-xs text-slate-500">Max: +{question.marks} | Negative: -{question.negativeMarks || 0}</span>
                      )}
                    </div>
                  </div>
                );
              })}
            </div>
          ) : (
            <div class="text-center py-12">
              <div class="w-20 h-20 bg-slate-100 rounded-full flex items-center justify-center mx-auto mb-4">
                <svg class="w-10 h-10 text-slate-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
                </svg>
              </div>
              <h3 class="text-xl font-semibold text-slate-900 mb-2">No Questions Found</h3>
              <p class="text-slate-600">This quiz result doesn't contain any questions.</p>
            </div>
          )}

          <!-- Action Buttons -->
          <div class="flex flex-col sm:flex-row gap-4 justify-center mt-8 md:mt-12">
            <button 
              onclick="window.location.href='/mock'" 
              class="px-8 py-4 bg-slate-800 text-white rounded-xl font-semibold text-lg shadow-lg hover:bg-slate-900 transition-all transform hover:scale-105"
            >
              Download JSON
            </button>
            <button 
              onclick="window.print()" 
              class="px-8 py-4 bg-white border-2 border-slate-800 text-slate-800 rounded-xl font-semibold text-lg hover:bg-slate-800 hover:text-white transition-all transform hover:scale-105"
            >
              Print
            </button>
          </div>

          <!-- Timestamp -->
          {quizResults.createdAt && (
            <div class="mt-8 pt-8 border-t border-slate-200 text-center">
              <p class="text-sm text-slate-500">
                <svg class="w-4 h-4 inline mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z" />
                </svg>
                Completed: {new Date(quizResults.createdAt).toLocaleString()}
              </p>
            </div>
          )}
        </div>
      </div>
    )}
  </div>
</Layout>