
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  PrismaClientKnownRequestError,
  PrismaClientUnknownRequestError,
  PrismaClientRustPanicError,
  PrismaClientInitializationError,
  PrismaClientValidationError,
  getPrismaClient,
  sqltag,
  empty,
  join,
  raw,
  skip,
  Decimal,
  Debug,
  objectEnumValues,
  makeStrictEnum,
  Extensions,
  warnOnce,
  defineDmmfProperty,
  Public,
  getRuntime,
  createParam,
} = require('./runtime/wasm-engine-edge.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.18.0
 * Query Engine version: 34b5a692b7bd79939a9a2c3ef97d816e749cda2f
 */
Prisma.prismaVersion = {
  client: "6.18.0",
  engine: "34b5a692b7bd79939a9a2c3ef97d816e749cda2f"
}

Prisma.PrismaClientKnownRequestError = PrismaClientKnownRequestError;
Prisma.PrismaClientUnknownRequestError = PrismaClientUnknownRequestError
Prisma.PrismaClientRustPanicError = PrismaClientRustPanicError
Prisma.PrismaClientInitializationError = PrismaClientInitializationError
Prisma.PrismaClientValidationError = PrismaClientValidationError
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = sqltag
Prisma.empty = empty
Prisma.join = join
Prisma.raw = raw
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = Extensions.getExtensionContext
Prisma.defineExtension = Extensions.defineExtension

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}





/**
 * Enums
 */
exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.MockSessionScalarFieldEnum = {
  id: 'id',
  clerkID: 'clerkID',
  mockID: 'mockID',
  createdAt: 'createdAt'
};

exports.Prisma.MockScalarFieldEnum = {
  id: 'id',
  subject: 'subject',
  instructions: 'instructions',
  clerkID: 'clerkID',
  totalTimeMins: 'totalTimeMins',
  createdAt: 'createdAt'
};

exports.Prisma.QuestionScalarFieldEnum = {
  id: 'id',
  number: 'number',
  content: 'content',
  marks: 'marks',
  negativeMarks: 'negativeMarks',
  correctOptionNumber: 'correctOptionNumber',
  correctOptionID: 'correctOptionID',
  mockID: 'mockID'
};

exports.Prisma.OptionScalarFieldEnum = {
  id: 'id',
  number: 'number',
  content: 'content',
  questionID: 'questionID'
};

exports.Prisma.AnswerScalarFieldEnum = {
  id: 'id',
  questionID: 'questionID',
  optionID: 'optionID',
  clerkID: 'clerkID',
  mockID: 'mockID'
};

exports.Prisma.MockResultScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  clerkID: 'clerkID',
  mockID: 'mockID',
  totalMarks: 'totalMarks',
  timeTakenSecs: 'timeTakenSecs',
  resultsJson: 'resultsJson'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};


exports.Prisma.ModelName = {
  MockSession: 'MockSession',
  Mock: 'Mock',
  Question: 'Question',
  Option: 'Option',
  Answer: 'Answer',
  MockResult: 'MockResult'
};
/**
 * Create the Client
 */
const config = {
  "generator": {
    "name": "client",
    "provider": {
      "fromEnvVar": null,
      "value": "prisma-client-js"
    },
    "output": {
      "value": "C:\\Users\\robin\\code\\eebony\\prisma\\generated\\prisma",
      "fromEnvVar": null
    },
    "config": {
      "engineType": "library"
    },
    "binaryTargets": [
      {
        "fromEnvVar": null,
        "value": "windows",
        "native": true
      }
    ],
    "previewFeatures": [],
    "sourceFilePath": "C:\\Users\\robin\\code\\eebony\\prisma\\schema.prisma",
    "isCustomOutput": true
  },
  "relativeEnvPaths": {
    "rootEnvPath": null,
    "schemaEnvPath": "../../../.env"
  },
  "relativePath": "../..",
  "clientVersion": "6.18.0",
  "engineVersion": "34b5a692b7bd79939a9a2c3ef97d816e749cda2f",
  "datasourceNames": [
    "db"
  ],
  "activeProvider": "postgresql",
  "inlineDatasources": {
    "db": {
      "url": {
        "fromEnvVar": "DATABASE_URL",
        "value": null
      }
    }
  },
  "inlineSchema": "generator client {\n  provider = \"prisma-client-js\"\n  output   = \"./generated/prisma\"\n}\n\ndatasource db {\n  provider = \"postgres\"\n  url      = env(\"DATABASE_URL\")\n}\n\nmodel MockSession {\n  id      String @id @default(uuid())\n  clerkID String @unique\n\n  mock   Mock   @relation(fields: [mockID], references: [id])\n  mockID String\n\n  Answer Answer[]\n\n  createdAt DateTime @default(now())\n}\n\nmodel Mock {\n  id           String @id @default(uuid())\n  subject      String @unique\n  instructions String\n  clerkID      String\n\n  totalTimeMins Int\n\n  questions Question[]\n  sessions  MockSession[]\n\n  createdAt DateTime @default(now())\n\n  MockResult MockResult[]\n}\n\nmodel Question {\n  id            String   @id @default(uuid())\n  number        Int\n  content       String\n  marks         Int\n  negativeMarks Int\n  options       Option[] @relation(\"options\")\n\n  correctOption Option? @relation(name: \"correctOption\", fields: [correctOptionID], references: [id])\n\n  correctOptionNumber Int\n  correctOptionID     String? @unique\n\n  mock   Mock   @relation(fields: [mockID], references: [id])\n  mockID String\n\n  Answer Answer[]\n}\n\nmodel Option {\n  id      String @id @default(uuid())\n  number  Int\n  content String\n\n  question   Question @relation(\"options\", fields: [questionID], references: [id])\n  questionID String\n\n  correctFor Question? @relation(\"correctOption\")\n\n  Answer Answer[]\n}\n\nmodel Answer {\n  id         String @id @default(uuid())\n  questionID String\n  optionID   String\n  clerkID    String\n  mockID     String\n\n  question Question    @relation(fields: [questionID], references: [id])\n  option   Option      @relation(fields: [optionID], references: [id])\n  session  MockSession @relation(fields: [clerkID], references: [clerkID])\n\n  @@unique([questionID, clerkID])\n}\n\nmodel MockResult {\n  id        String   @id @default(cuid())\n  createdAt DateTime @default(now())\n\n  clerkID String\n  mockID  String\n  mock    Mock   @relation(fields: [mockID], references: [id])\n\n  totalMarks    Int\n  timeTakenSecs Int\n\n  resultsJson Json\n}\n",
  "inlineSchemaHash": "42c96bf9fa10be1ec6ca4c8780405174bb3eea5325559cab1c98b199be3c1112",
  "copyEngine": false
}
config.dirname = '/'

config.runtimeDataModel = JSON.parse("{\"models\":{\"MockSession\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"clerkID\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"mock\",\"kind\":\"object\",\"type\":\"Mock\",\"relationName\":\"MockToMockSession\"},{\"name\":\"mockID\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"Answer\",\"kind\":\"object\",\"type\":\"Answer\",\"relationName\":\"AnswerToMockSession\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null},\"Mock\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"subject\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"instructions\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"clerkID\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"totalTimeMins\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"questions\",\"kind\":\"object\",\"type\":\"Question\",\"relationName\":\"MockToQuestion\"},{\"name\":\"sessions\",\"kind\":\"object\",\"type\":\"MockSession\",\"relationName\":\"MockToMockSession\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"MockResult\",\"kind\":\"object\",\"type\":\"MockResult\",\"relationName\":\"MockToMockResult\"}],\"dbName\":null},\"Question\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"number\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"content\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"marks\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"negativeMarks\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"options\",\"kind\":\"object\",\"type\":\"Option\",\"relationName\":\"options\"},{\"name\":\"correctOption\",\"kind\":\"object\",\"type\":\"Option\",\"relationName\":\"correctOption\"},{\"name\":\"correctOptionNumber\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"correctOptionID\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"mock\",\"kind\":\"object\",\"type\":\"Mock\",\"relationName\":\"MockToQuestion\"},{\"name\":\"mockID\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"Answer\",\"kind\":\"object\",\"type\":\"Answer\",\"relationName\":\"AnswerToQuestion\"}],\"dbName\":null},\"Option\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"number\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"content\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"question\",\"kind\":\"object\",\"type\":\"Question\",\"relationName\":\"options\"},{\"name\":\"questionID\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"correctFor\",\"kind\":\"object\",\"type\":\"Question\",\"relationName\":\"correctOption\"},{\"name\":\"Answer\",\"kind\":\"object\",\"type\":\"Answer\",\"relationName\":\"AnswerToOption\"}],\"dbName\":null},\"Answer\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"questionID\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"optionID\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"clerkID\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"mockID\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"question\",\"kind\":\"object\",\"type\":\"Question\",\"relationName\":\"AnswerToQuestion\"},{\"name\":\"option\",\"kind\":\"object\",\"type\":\"Option\",\"relationName\":\"AnswerToOption\"},{\"name\":\"session\",\"kind\":\"object\",\"type\":\"MockSession\",\"relationName\":\"AnswerToMockSession\"}],\"dbName\":null},\"MockResult\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"clerkID\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"mockID\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"mock\",\"kind\":\"object\",\"type\":\"Mock\",\"relationName\":\"MockToMockResult\"},{\"name\":\"totalMarks\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"timeTakenSecs\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"resultsJson\",\"kind\":\"scalar\",\"type\":\"Json\"}],\"dbName\":null}},\"enums\":{},\"types\":{}}")
defineDmmfProperty(exports.Prisma, config.runtimeDataModel)
config.engineWasm = undefined
config.compilerWasm = undefined

config.injectableEdgeEnv = () => ({
  parsed: {
    DATABASE_URL: typeof globalThis !== 'undefined' && globalThis['DATABASE_URL'] || typeof process !== 'undefined' && process.env && process.env.DATABASE_URL || undefined
  }
})

if (typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined) {
  Debug.enable(typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined)
}

const PrismaClient = getPrismaClient(config)
exports.PrismaClient = PrismaClient
Object.assign(exports, Prisma)

