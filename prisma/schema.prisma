generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
  engineType = "library"
  binaryTargets = ["native"]
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Device {
  id      String  @id
  label   String
  clerkID String? @unique
}

model MockSession {
  id       String  @id @default(uuid())
  clerkID  String? @unique
  deviceID String  @unique

  mock   Mock   @relation(fields: [mockID], references: [id])
  mockID String

  Answer Answer[]

  createdAt DateTime @default(now())
}

model Mock {
  id           String @id @default(uuid())
  subject      String
  instructions String
  clerkID      String

  totalTimeMins Int

  questions Question[]
  sessions  MockSession[]

  createdAt DateTime @default(now())
}

model Question {
  id      String   @id @default(uuid())
  number  Int
  content String
  marks   Int
  negativeMarks Int
  options Option[] @relation("options")

  correctOption Option? @relation(name: "correctOption", fields: [correctOptionID], references: [id])

  correctOptionNumber Int
  correctOptionID     String? @unique

  mock   Mock   @relation(fields: [mockID], references: [id])
  mockID String

  Answer Answer[]
}

model Option {
  id      String @id @default(uuid())
  number  Int
  content String

  question   Question @relation("options", fields: [questionID], references: [id])
  questionID String

  correctFor Question? @relation("correctOption")

  Answer Answer[]
}

model Answer {
  id         String   @id @default(uuid())
  questionID String
  optionID   String
  deviceID   String
  mockID     String

  question   Question @relation(fields: [questionID], references: [id])
  option     Option   @relation(fields: [optionID], references: [id])
  session    MockSession @relation(fields: [deviceID], references: [deviceID])

  @@unique([questionID, deviceID])
}
